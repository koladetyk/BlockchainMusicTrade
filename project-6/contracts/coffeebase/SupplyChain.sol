pragma solidity ^0.5.0;


// Define a contract 'Supplychain'
contract SupplyChain {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'music' that maps the UPC to an Music.
  mapping (uint => Music) public music;

  // Define a public mapping 'musicHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) public musicHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Made,  // 0
    Registered,  // 1
    Verified,     // 2
    Promoted,    // 3
    Distributed,       // 4
    ForSale,       //5
    Bought,    // 6
    Listened   // 7
  }

  State constant defaultState = State.Made;

  // Define a struct 'Music' with the following fields:
  struct Music {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Artist, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originArtistID; // Metamask-Ethereum address of the Artist
    string  originArtistName; // Artist Name
    string  originArtistInformation;  // Artist Information
    string  originArtistCity; // Artist City
    string  originArtistNationality;  // Artist Nationality
    uint    musicID;  // Music ID potentially a combination of upc + sku
    string  musicNotes; // Music Notes
    uint    musicPrice; // Music Price
    State   musicState;  // Music State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address recordLabelID; // Metamask-Ethereum address of the RecordLabe
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Made(uint upc);
  event Registered(uint upc);
  event Verified(uint upc);
  event Promoted(uint upc);
  event Distributed(uint upc);
  event ForSale(uint upc);
  event Bought(uint upc);
  event Listened(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = music[_upc].musicPrice;
    uint amountToReturn = msg.value - _price;
    music[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an music.state of a upc is Made
  modifier made(uint _upc) {
    require(music[_upc].musicState == State.Made);
    _;
  }

  // Define a modifier that checks if an music.state of a upc is Registered
  modifier registered(uint _upc) {
    require(music[_upc].musicState == State.Registered);
    _;
  }
  
  // Define a modifier that checks if an music.state of a upc is Verified
  modifier verified(uint _upc) {
    require(music[_upc].musicState == State.Verified);
    _;
  }

  // Define a modifier that checks if an music.state of a upc is Promoted
  modifier promoted(uint _upc) {
    require(music[_upc].musicState == State.Promoted);
    _;
  }

  // Define a modifier that checks if an music.state of a upc is Distributed
  modifier distributed(uint _upc) {
    require(music[_upc].musicState == State.Distributed);
    _;
  }

  // Define a modifier that checks if an music.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(music[_upc].musicState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an music.state of a upc is Bought
  modifier bought(uint _upc) {
    require(music[_upc].musicState == State.Bought);
    _;
  }
  
  // Define a modifier that checks if an music.state of a upc is Listened
  modifier listened(uint _upc) {
    require(music[_upc].musicState == State.Listened);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

// Define a struct to hold the music information
struct MusicInfo {
    uint upc;
    address ownerID;
    string originArtistName;
    string originArtistInformation;
    string originArtistCity;
    string originArtistNationality;
    string musicNotes;
}

// Define a function 'makeMusic' that allows an artist to make music 
function makeMusic(MusicInfo memory info) public {
    // Add new music
    music[info.upc] = Music({
        sku: sku + 1,
        upc: info.upc,
        ownerID: info.ownerID,
        originArtistID: info.ownerID,
        originArtistName: info.originArtistName,
        originArtistInformation: info.originArtistInformation,
        originArtistCity: info.originArtistCity,
        originArtistNationality: info.originArtistNationality,
        musicID: info.upc + sku,
        musicNotes: info.musicNotes,
        musicPrice: 0,
        musicState: State.Made,
        distributorID: address(0),
        recordLabelID: address(0),
        consumerID: address(0)
    });

    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit Made(info.upc);
}

  // Define a function 'registerMusic' that allows an artist to mark music as 'Registered'
  function registerMusic(uint _upc) public
  made(_upc)
  verifyCaller(music[_upc].originArtistID)
  {
    // Update the appropriate fields
    music[_upc].musicState = State.Registered;

    // Emit the appropriate event
    emit Registered(_upc);
  }

  // Define a function 'verifyMusic' that allows an artist to mark music as 'Registered'
  function verifyMusic(uint _upc) public
  registered(_upc)
  verifyCaller(music[_upc].originArtistID)
  {
    // Update the appropriate fields
    music[_upc].musicState = State.Verified;

    // Emit the appropriate event
    emit Verified(_upc);
  }

  // Define a function 'verifyMusic' that allows an artist to mark music as 'Registered'
  function promoteMusic(uint _upc) public
  verified(_upc)
  verifyCaller(music[_upc].originArtistID)
  {
    // Update the appropriate fields
    music[_upc].musicState = State.Promoted;

    // Emit the appropriate event
    emit Promoted(_upc);
  }

  // Define a function 'verifyMusic' that allows an artist to mark music as 'Registered'
  function distributeMusic(uint _upc) public
  promoted(_upc)
  verifyCaller(music[_upc].originArtistID)
  {
    // Update the appropriate fields
    music[_upc].musicState = State.Distributed;

    // Emit the appropriate event
    emit Distributed(_upc);
  }

  // Define a function 'sellMusic' that allows a farmer to mark music as 'ForSale'
  function sellMusic(uint _upc, uint _price) public 
  distributed(_upc)
  verifyCaller(music[_upc].originArtistID)
  {
    // Update the appropriate fields
    music[_upc].musicState = State.ForSale;
    music[_upc].musicPrice = _price;

    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyMusic' that allows the disributor to mark music as 'Bought'
  // Use the above defined modifiers to check if the music is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyMusic(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifier to check if buyer has paid enough
    paidEnough(music[_upc].musicPrice)
    // Call modifier to send any excess ether back to buyer
    checkValue(_upc)
  {
    
    // Update the appropriate fields - ownerID, distributorID, musicState
    music[_upc].ownerID = msg.sender;
    music[_upc].distributorID = msg.sender;
    music[_upc].musicState = State.Bought;
    
    // Transfer money to farmer
    music[_upc].originArtistID.transfer(music[_upc].musicPrice);

    // Emit the appropriate event
    emit Bought(_upc);
    
  }

  // Define a function 'listenToMusic' that allow a consumer to 'listen to music'
  function listenToMusic(uint _upc) public 
    bought(_upc)
    verifyCaller(music[_upc].originArtistID)
  {
    // Update the appropriate fields
    music[_upc].musicState = State.Listened;

    // Emit the appropriate event
    emit Listened(_upc);
  }


  function fetchmusicBufferOne(uint _upc) public view returns 
(
  uint    musicSKU,
  uint    musicUPC,
  address ownerID,
  address originArtistID,
  string  originArtistName,
  string  originArtistInformation,
  string  originArtistCity,
  string  originArtistNationality
) 
{
  Music memory m = music[_upc];
  return (
    m.sku,
    m.upc,
    m.ownerID,
    m.originArtistID,
    m.originArtistName,
    m.originArtistInformation,
    m.originArtistCity,
    m.originArtistNationality
  );
}

function fetchmusicBufferTwo(uint _upc) public view returns 
(
  uint    musicSKU,
  uint    musicUPC,
  uint    musicID,
  string  musicNotes,
  uint    musicPrice,
  uint    musicState,
  address distributorID,
  address recordLabelID,
  address consumerID
) 
{
  Music memory m = music[_upc];
  return (
    m.sku,
    m.upc,
    m.musicID,
    m.musicNotes,
    m.musicPrice,
    uint(m.musicState),
    m.distributorID,
    m.recordLabelID,
    m.consumerID
  );
}
}